{"ast":null,"code":"import { login } from '../pages/auth/service';\nimport { getLatestTweets } from '../pages/tweets/service';\nimport { areTweetsLoaded } from './selectors';\nimport { AUTH_LOGIN_FAILURE, AUTH_LOGIN_REQUEST, AUTH_LOGIN_SUCCESS, AUTH_LOGOUT, TWEETS_LOADED_FAILURE, TWEETS_LOADED_REQUEST, TWEETS_LOADED_SUCCESS, UI_RESET_ERROR } from './types';\nexport const authLoginRequest = () => ({\n  type: AUTH_LOGIN_REQUEST\n});\nexport const authLoginSuccess = () => ({\n  type: AUTH_LOGIN_SUCCESS\n});\nexport const authLoginFailure = error => ({\n  type: AUTH_LOGIN_FAILURE,\n  error: true,\n  payload: error\n});\nexport function authLogin(credentials) {\n  return async function (dispatch, getState, {\n    api: {\n      auth\n    }\n  }) {\n    try {\n      dispatch(authLoginRequest());\n      await auth.login(credentials);\n      dispatch(authLoginSuccess());\n    } catch (error) {\n      dispatch(authLoginFailure(error));\n      throw error;\n    }\n  };\n}\nexport const authLogout = () => ({\n  type: AUTH_LOGOUT\n});\nexport const tweetsLoadedRequest = () => ({\n  type: TWEETS_LOADED_REQUEST\n});\nexport const tweetsLoadedSuccess = tweets => ({\n  type: TWEETS_LOADED_SUCCESS,\n  payload: tweets\n});\nexport const tweetsLoadedFailure = error => ({\n  type: TWEETS_LOADED_FAILURE,\n  error: true,\n  payload: error\n});\nexport function loadTweets() {\n  return async function (dispatch, getState, {\n    api: {\n      tweets\n    }\n  }) {\n    if (areTweetsLoaded(getState())) {\n      return;\n    }\n    try {\n      dispatch(tweetsLoadedRequest());\n      const tweetsList = await tweets.getLatestTweets();\n      dispatch(tweetsLoadedSuccess(tweetsList));\n    } catch (error) {\n      dispatch(tweetsLoadedFailure(error));\n      throw error;\n    }\n  };\n}\nexport const uiResetError = () => ({\n  type: UI_RESET_ERROR\n});","map":{"version":3,"names":["login","getLatestTweets","areTweetsLoaded","AUTH_LOGIN_FAILURE","AUTH_LOGIN_REQUEST","AUTH_LOGIN_SUCCESS","AUTH_LOGOUT","TWEETS_LOADED_FAILURE","TWEETS_LOADED_REQUEST","TWEETS_LOADED_SUCCESS","UI_RESET_ERROR","authLoginRequest","type","authLoginSuccess","authLoginFailure","error","payload","authLogin","credentials","dispatch","getState","api","auth","authLogout","tweetsLoadedRequest","tweetsLoadedSuccess","tweets","tweetsLoadedFailure","loadTweets","tweetsList","uiResetError"],"sources":["/Users/alex/Desktop/KEEPKODING/REACT_AVANZADO/GIT/FullStack07_React_app_tweeter_REDUX_/src/store/actions.js"],"sourcesContent":["import { login } from '../pages/auth/service';\nimport { getLatestTweets } from '../pages/tweets/service';\nimport { areTweetsLoaded } from './selectors';\nimport {\n  AUTH_LOGIN_FAILURE,\n  AUTH_LOGIN_REQUEST,\n  AUTH_LOGIN_SUCCESS,\n  AUTH_LOGOUT,\n  TWEETS_LOADED_FAILURE,\n  TWEETS_LOADED_REQUEST,\n  TWEETS_LOADED_SUCCESS,\n  UI_RESET_ERROR,\n} from './types';\n\nexport const authLoginRequest = () => ({\n  type: AUTH_LOGIN_REQUEST,\n});\n\nexport const authLoginSuccess = () => ({\n  type: AUTH_LOGIN_SUCCESS,\n});\n\nexport const authLoginFailure = error => ({\n  type: AUTH_LOGIN_FAILURE,\n  error: true,\n  payload: error,\n});\n\nexport function authLogin(credentials) {\n  return async function (dispatch, getState, { api: { auth } }) {\n    try {\n      dispatch(authLoginRequest());\n      await auth.login(credentials);\n      dispatch(authLoginSuccess());\n    } catch (error) {\n      dispatch(authLoginFailure(error));\n      throw error;\n    }\n  };\n}\n\nexport const authLogout = () => ({\n  type: AUTH_LOGOUT,\n});\n\nexport const tweetsLoadedRequest = () => ({\n  type: TWEETS_LOADED_REQUEST,\n});\n\nexport const tweetsLoadedSuccess = tweets => ({\n  type: TWEETS_LOADED_SUCCESS,\n  payload: tweets,\n});\n\nexport const tweetsLoadedFailure = error => ({\n  type: TWEETS_LOADED_FAILURE,\n  error: true,\n  payload: error,\n});\n\nexport function loadTweets() {\n  return async function (dispatch, getState, { api: { tweets } }) {\n    if (areTweetsLoaded(getState())) {\n      return;\n    }\n\n    try {\n      dispatch(tweetsLoadedRequest());\n      const tweetsList = await tweets.getLatestTweets();\n      dispatch(tweetsLoadedSuccess(tweetsList));\n    } catch (error) {\n      dispatch(tweetsLoadedFailure(error));\n      throw error;\n    }\n  };\n}\n\nexport const uiResetError = () => ({ type: UI_RESET_ERROR });\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,uBAAuB;AAC7C,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,eAAe,QAAQ,aAAa;AAC7C,SACEC,kBAAkB,EAClBC,kBAAkB,EAClBC,kBAAkB,EAClBC,WAAW,EACXC,qBAAqB,EACrBC,qBAAqB,EACrBC,qBAAqB,EACrBC,cAAc,QACT,SAAS;AAEhB,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,MAAO;EACrCC,IAAI,EAAER;AACR,CAAC,CAAC;AAEF,OAAO,MAAMS,gBAAgB,GAAGA,CAAA,MAAO;EACrCD,IAAI,EAAEP;AACR,CAAC,CAAC;AAEF,OAAO,MAAMS,gBAAgB,GAAGC,KAAK,KAAK;EACxCH,IAAI,EAAET,kBAAkB;EACxBY,KAAK,EAAE,IAAI;EACXC,OAAO,EAAED;AACX,CAAC,CAAC;AAEF,OAAO,SAASE,SAASA,CAACC,WAAW,EAAE;EACrC,OAAO,gBAAgBC,QAAQ,EAAEC,QAAQ,EAAE;IAAEC,GAAG,EAAE;MAAEC;IAAK;EAAE,CAAC,EAAE;IAC5D,IAAI;MACFH,QAAQ,CAACR,gBAAgB,CAAC,CAAC,CAAC;MAC5B,MAAMW,IAAI,CAACtB,KAAK,CAACkB,WAAW,CAAC;MAC7BC,QAAQ,CAACN,gBAAgB,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdI,QAAQ,CAACL,gBAAgB,CAACC,KAAK,CAAC,CAAC;MACjC,MAAMA,KAAK;IACb;EACF,CAAC;AACH;AAEA,OAAO,MAAMQ,UAAU,GAAGA,CAAA,MAAO;EAC/BX,IAAI,EAAEN;AACR,CAAC,CAAC;AAEF,OAAO,MAAMkB,mBAAmB,GAAGA,CAAA,MAAO;EACxCZ,IAAI,EAAEJ;AACR,CAAC,CAAC;AAEF,OAAO,MAAMiB,mBAAmB,GAAGC,MAAM,KAAK;EAC5Cd,IAAI,EAAEH,qBAAqB;EAC3BO,OAAO,EAAEU;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,mBAAmB,GAAGZ,KAAK,KAAK;EAC3CH,IAAI,EAAEL,qBAAqB;EAC3BQ,KAAK,EAAE,IAAI;EACXC,OAAO,EAAED;AACX,CAAC,CAAC;AAEF,OAAO,SAASa,UAAUA,CAAA,EAAG;EAC3B,OAAO,gBAAgBT,QAAQ,EAAEC,QAAQ,EAAE;IAAEC,GAAG,EAAE;MAAEK;IAAO;EAAE,CAAC,EAAE;IAC9D,IAAIxB,eAAe,CAACkB,QAAQ,CAAC,CAAC,CAAC,EAAE;MAC/B;IACF;IAEA,IAAI;MACFD,QAAQ,CAACK,mBAAmB,CAAC,CAAC,CAAC;MAC/B,MAAMK,UAAU,GAAG,MAAMH,MAAM,CAACzB,eAAe,CAAC,CAAC;MACjDkB,QAAQ,CAACM,mBAAmB,CAACI,UAAU,CAAC,CAAC;IAC3C,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdI,QAAQ,CAACQ,mBAAmB,CAACZ,KAAK,CAAC,CAAC;MACpC,MAAMA,KAAK;IACb;EACF,CAAC;AACH;AAEA,OAAO,MAAMe,YAAY,GAAGA,CAAA,MAAO;EAAElB,IAAI,EAAEF;AAAe,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}