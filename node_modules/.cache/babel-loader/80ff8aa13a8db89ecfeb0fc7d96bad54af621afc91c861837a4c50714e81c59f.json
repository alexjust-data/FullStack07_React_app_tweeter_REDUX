{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { thunk, withExtraArgument } from 'redux-thunk';\nimport { composeWithDevTools } from '@redux-devtools/extension';\nimport * as reducers from './reducers';\nimport * as actionCreators from './actions';\nimport * as tweets from '../pages/tweets/service';\nimport * as auth from '../pages/auth/service';\nconst composeEnhancers = composeWithDevTools({\n  actionCreators\n});\n\n// const thunk = extraArgument => store => next => action => {\n//   if (typeof action === 'function') {\n//     return action(store.dispatch, store.getState, extraArgument);\n//   }\n//   next(action);\n// };\n\nconst logger = store => next => action => {\n  console.group(action.type);\n  console.info('dispatching', action, store.getState());\n  const result = next(action);\n  console.log('final state', store.getState());\n  console.groupEnd();\n  return result;\n};\nconst noAction = () => next => action => {\n  if (action.type.endsWith('/no-throw')) {\n    return;\n  }\n  return next(action);\n};\nconst timestamp = () => next => action => {\n  return next({\n    ...action,\n    meta: {\n      ...action.meta,\n      timestamp: new Date()\n    }\n  });\n};\nconst middleware = [withExtraArgument({\n  api: {\n    auth,\n    tweets\n  }\n}), timestamp, logger, noAction];\nexport default function configureStore(preloadedState) {\n  const store = createStore(combineReducers(reducers), preloadedState, composeEnhancers(applyMiddleware(...middleware))\n  // window.__REDUX_DEVTOOLS_EXTENSION__ &&\n  //   window.__REDUX_DEVTOOLS_EXTENSION__(),\n  );\n\n  return store;\n}","map":{"version":3,"names":["createStore","combineReducers","applyMiddleware","thunk","withExtraArgument","composeWithDevTools","reducers","actionCreators","tweets","auth","composeEnhancers","logger","store","next","action","console","group","type","info","getState","result","log","groupEnd","noAction","endsWith","timestamp","meta","Date","middleware","api","configureStore","preloadedState"],"sources":["/Users/alex/Desktop/KEEPKODING/REACT_AVANZADO/GIT/FullStack07_React_app_tweeter_REDUX_/src/store/index.js"],"sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { thunk, withExtraArgument } from 'redux-thunk';\nimport { composeWithDevTools } from '@redux-devtools/extension';\n\nimport * as reducers from './reducers';\nimport * as actionCreators from './actions';\n\nimport * as tweets from '../pages/tweets/service';\nimport * as auth from '../pages/auth/service';\n\nconst composeEnhancers = composeWithDevTools({ actionCreators });\n\n// const thunk = extraArgument => store => next => action => {\n//   if (typeof action === 'function') {\n//     return action(store.dispatch, store.getState, extraArgument);\n//   }\n//   next(action);\n// };\n\nconst logger = store => next => action => {\n  console.group(action.type);\n  console.info('dispatching', action, store.getState());\n  const result = next(action);\n  console.log('final state', store.getState());\n  console.groupEnd();\n  return result;\n};\n\nconst noAction = () => next => action => {\n  if (action.type.endsWith('/no-throw')) {\n    return;\n  }\n  return next(action);\n};\n\nconst timestamp = () => next => action => {\n  return next({\n    ...action,\n    meta: { ...action.meta, timestamp: new Date() },\n  });\n};\n\nconst middleware = [\n  withExtraArgument({ api: { auth, tweets } }),\n  timestamp,\n  logger,\n  noAction,\n];\n\nexport default function configureStore(preloadedState) {\n  const store = createStore(\n    combineReducers(reducers),\n    preloadedState,\n    composeEnhancers(applyMiddleware(...middleware)),\n    // window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    //   window.__REDUX_DEVTOOLS_EXTENSION__(),\n  );\n  return store;\n}"],"mappings":"AAAA,SAASA,WAAW,EAAEC,eAAe,EAAEC,eAAe,QAAQ,OAAO;AACrE,SAASC,KAAK,EAAEC,iBAAiB,QAAQ,aAAa;AACtD,SAASC,mBAAmB,QAAQ,2BAA2B;AAE/D,OAAO,KAAKC,QAAQ,MAAM,YAAY;AACtC,OAAO,KAAKC,cAAc,MAAM,WAAW;AAE3C,OAAO,KAAKC,MAAM,MAAM,yBAAyB;AACjD,OAAO,KAAKC,IAAI,MAAM,uBAAuB;AAE7C,MAAMC,gBAAgB,GAAGL,mBAAmB,CAAC;EAAEE;AAAe,CAAC,CAAC;;AAEhE;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,MAAM,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;EACxCC,OAAO,CAACC,KAAK,CAACF,MAAM,CAACG,IAAI,CAAC;EAC1BF,OAAO,CAACG,IAAI,CAAC,aAAa,EAAEJ,MAAM,EAAEF,KAAK,CAACO,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAMC,MAAM,GAAGP,IAAI,CAACC,MAAM,CAAC;EAC3BC,OAAO,CAACM,GAAG,CAAC,aAAa,EAAET,KAAK,CAACO,QAAQ,CAAC,CAAC,CAAC;EAC5CJ,OAAO,CAACO,QAAQ,CAAC,CAAC;EAClB,OAAOF,MAAM;AACf,CAAC;AAED,MAAMG,QAAQ,GAAGA,CAAA,KAAMV,IAAI,IAAIC,MAAM,IAAI;EACvC,IAAIA,MAAM,CAACG,IAAI,CAACO,QAAQ,CAAC,WAAW,CAAC,EAAE;IACrC;EACF;EACA,OAAOX,IAAI,CAACC,MAAM,CAAC;AACrB,CAAC;AAED,MAAMW,SAAS,GAAGA,CAAA,KAAMZ,IAAI,IAAIC,MAAM,IAAI;EACxC,OAAOD,IAAI,CAAC;IACV,GAAGC,MAAM;IACTY,IAAI,EAAE;MAAE,GAAGZ,MAAM,CAACY,IAAI;MAAED,SAAS,EAAE,IAAIE,IAAI,CAAC;IAAE;EAChD,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,UAAU,GAAG,CACjBxB,iBAAiB,CAAC;EAAEyB,GAAG,EAAE;IAAEpB,IAAI;IAAED;EAAO;AAAE,CAAC,CAAC,EAC5CiB,SAAS,EACTd,MAAM,EACNY,QAAQ,CACT;AAED,eAAe,SAASO,cAAcA,CAACC,cAAc,EAAE;EACrD,MAAMnB,KAAK,GAAGZ,WAAW,CACvBC,eAAe,CAACK,QAAQ,CAAC,EACzByB,cAAc,EACdrB,gBAAgB,CAACR,eAAe,CAAC,GAAG0B,UAAU,CAAC;EAC/C;EACA;EACF,CAAC;;EACD,OAAOhB,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}