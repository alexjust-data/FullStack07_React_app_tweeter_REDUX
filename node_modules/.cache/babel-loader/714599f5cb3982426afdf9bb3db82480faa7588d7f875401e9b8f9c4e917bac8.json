{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\n// import { thunk } from 'redux-thunk';\nimport { composeWithDevTools } from '@redux-devtools/extension';\nimport * as reducers from './reducers';\nimport * as actionCreators from './actions';\nconst composeEnhancers = composeWithDevTools({\n  actionCreators\n});\nconst thunk = store => next => action => {\n  if (typeof action === 'function') {\n    return action(store.dispatch, store.getState);\n  }\n  next(action);\n};\nconst logger = store => next => action => {\n  console.group(action.type);\n  console.info('dispatching', action, store.getState());\n  const result = next(action);\n  console.log('final state', store.getState());\n  console.groupEnd();\n  return result;\n};\nconst middleware = [thunk, logger];\nexport default function configureStore(preloadedState) {\n  const store = createStore(combineReducers(reducers), preloadedState, composeEnhancers(applyMiddleware(...middleware))\n  // window.__REDUX_DEVTOOLS_EXTENSION__ &&\n  //   window.__REDUX_DEVTOOLS_EXTENSION__(),\n  );\n\n  return store;\n}","map":{"version":3,"names":["createStore","combineReducers","applyMiddleware","composeWithDevTools","reducers","actionCreators","composeEnhancers","thunk","store","next","action","dispatch","getState","logger","console","group","type","info","result","log","groupEnd","middleware","configureStore","preloadedState"],"sources":["/Users/alex/Desktop/KEEPKODING/REACT_AVANZADO/GIT/FullStack07_React_app_tweeter_REDUX_/src/store/index.js"],"sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\n// import { thunk } from 'redux-thunk';\nimport { composeWithDevTools } from '@redux-devtools/extension';\n\nimport * as reducers from './reducers';\nimport * as actionCreators from './actions';\n\nconst composeEnhancers = composeWithDevTools({ actionCreators });\nconst thunk = store => next => action => {\n  if (typeof action === 'function') {\n    return action(store.dispatch, store.getState);\n  }\n  next(action);\n};\n\nconst logger = store => next => action => {\n  console.group(action.type);\n  console.info('dispatching', action, store.getState());\n  const result = next(action);\n  console.log('final state', store.getState());\n  console.groupEnd();\n  return result;\n};\n\nconst middleware = [thunk, logger];\n\nexport default function configureStore(preloadedState) {\n  const store = createStore(\n    combineReducers(reducers),\n    preloadedState,\n    composeEnhancers(applyMiddleware(...middleware)),\n    // window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    //   window.__REDUX_DEVTOOLS_EXTENSION__(),\n  );\n  return store;\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,eAAe,EAAEC,eAAe,QAAQ,OAAO;AACrE;AACA,SAASC,mBAAmB,QAAQ,2BAA2B;AAE/D,OAAO,KAAKC,QAAQ,MAAM,YAAY;AACtC,OAAO,KAAKC,cAAc,MAAM,WAAW;AAE3C,MAAMC,gBAAgB,GAAGH,mBAAmB,CAAC;EAAEE;AAAe,CAAC,CAAC;AAChE,MAAME,KAAK,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;EACvC,IAAI,OAAOA,MAAM,KAAK,UAAU,EAAE;IAChC,OAAOA,MAAM,CAACF,KAAK,CAACG,QAAQ,EAAEH,KAAK,CAACI,QAAQ,CAAC;EAC/C;EACAH,IAAI,CAACC,MAAM,CAAC;AACd,CAAC;AAED,MAAMG,MAAM,GAAGL,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;EACxCI,OAAO,CAACC,KAAK,CAACL,MAAM,CAACM,IAAI,CAAC;EAC1BF,OAAO,CAACG,IAAI,CAAC,aAAa,EAAEP,MAAM,EAAEF,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAMM,MAAM,GAAGT,IAAI,CAACC,MAAM,CAAC;EAC3BI,OAAO,CAACK,GAAG,CAAC,aAAa,EAAEX,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC;EAC5CE,OAAO,CAACM,QAAQ,CAAC,CAAC;EAClB,OAAOF,MAAM;AACf,CAAC;AAED,MAAMG,UAAU,GAAG,CAACd,KAAK,EAAEM,MAAM,CAAC;AAElC,eAAe,SAASS,cAAcA,CAACC,cAAc,EAAE;EACrD,MAAMf,KAAK,GAAGR,WAAW,CACvBC,eAAe,CAACG,QAAQ,CAAC,EACzBmB,cAAc,EACdjB,gBAAgB,CAACJ,eAAe,CAAC,GAAGmB,UAAU,CAAC;EAC/C;EACA;EACF,CAAC;;EACD,OAAOb,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}